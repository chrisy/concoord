import inspect, types
from obj import *

INDENT = '\t'

def get_functions_of_obj(classobj):
    templist = dir(classobj)
    dirlist = []
    for temp in templist:
        if isinstance(classobj.__dict__[temp], types.FunctionType):
            dirlist.append(temp)
    return dirlist

def get_arguments_of_func(function):
    args, _, _, values = inspect.getargspec(function)
    return args

def create_file(classobject):
    f = open("clientobj/"+classobject.__name__.lower()+".py", 'w')
    objectfunctions = get_functions_of_obj(classobject)
    f.write("#automatically generated by the clientobjectgenerator\n")
    f.write("from clientproxy import *\n\n")
    f.write("class "+classobject.__name__+"():\n")
    for function in objectfunctions:
        f.write(INDENT + "def " + function + "(")
        f.write(", ".join(get_arguments_of_func(getattr(classobject, function))) + "):\n")
        f.write(INDENT + INDENT + "invoke_command(")
        f.write("self, \"" + function + "\"")
        f.write(", ".join(['']+get_arguments_of_func(getattr(classobject, function))[1:]) + ")\n\n")
    f.close()
    return f
    
get_class = lambda x: globals()[x]

def createproxyfromname(objectname):
    moduleobject = get_class(objectname)
    classobject = getattr(moduleobject, objectname.capitalize())
    return create_file(classobject)

def getobjectfromname(objectname):
    moduleobject = get_class(objectname)
    return getattr(moduleobject, objectname.capitalize())
