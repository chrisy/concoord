""" This file keeps the outstanding changes and thoughts
we have about paxi.
"""

*** CHANGES TO THE CODE ***
Leader	       	   	 : commandnumber - how will it be updated
				      
Node			 : Periodic Liveness Messages should be added: MSG_PING
			   	   if we use the same socket for
			   	   MSG_PING as we use for other types
			   	   of messages the timeout will not be
			   	   accurate as the MSG_PING may be
			   	   delayed in select (due to a backlog)

Replica & enums	  : Magic Numbers added to enums for
(COMMANDSTATE,COMMAND)

Message			 : Command class to keep (clientid, clientcommandnumber, command)
			   	   triples. Will be used to prevent
			   	   double assignment of commands

Replica		         : Replica receives ClientRequests, assigns a
			   	   commandnumber and forwards them to
			   	   the Leader (which Leader?)

Leader		         : global proposals and xor this with the
pmaxset before sending commands 

*** TO THINK ABOUT ***
- Messages have 'at least one semantics'; at which points should we
check if a message has been received before or not?
      -- Replica should not execute a command that has been executed
      before again.
      -- Replica should not accept a command from a client and assume
      that it is a new command if it's not. For this unique cid's
      should be used and replica has to check the cid's.
- How should the Leader and Replica states be updated so commandnumber allocation is done apropriately.
- Should Leaders extend Replicas? 
- How to make Leader not reissue all previous commands
    -- Leader can have the state that Replica has (especially if the Leader extends a Replica) and not reissue command in the
         Executed (maybe even Decided) state.
    -- Leader can receive periodic "state of the system" messages from Replicas
- How will Leader Failure be handled.
- How will the weak Leader election be done.


*** DONE ***
Leader & Acceptor	 : The replies for PREPARE and PROPOSE should have different names:
			       	       - MSG_PREPARE_ADOPTED
				       - MSG_PREPARE_PREEMPTED
				       - MSG_PROPOSE_ACCEPT
				       - MSG_PROPOSE_REJECT

Replica			 : 'requests' keeps <commandnumber:(commandstate,command/result)> mappings
			  	   'commandstate' can be Executed,Decided,Running,None
				   		  - Executed: The command corresponding to the commandnumber has 
						    	      	     been both decided and executed.
						  - Decided: The command corresponding to the commandnumber has 
						    	     	     been decided but it is not executed yet (probably due to an 
								     outstanding command prior to this command.)
						  - Running: The commandnumber is assigned to a command but the 
						    	     	     result is not known yet.
						  - None: The commandnumber has not been assigned to any command.
			  	   'nexttodecide' keeps the commandnumber that should be used for the next proposal
				   'nexttoexecute' keeps the commandnumber that has been executed

ResponseCollector    : 'received' keeps <peer:reply> mappings
		      	       	  upon receiving a reply the Response Collector adds it to 'received'
				  if a reply is coming for the second time it overwrites the old one
				  the length of 'received' determines if quorum is reached or not

Leader			  : 'proposals' keeps <commandnumber:proposal> mappings with the 
			  	   highest ballotnumber
				   Leader updates proposals by pMax(possiblepvalueset)
				   Leader goes over all proposals in this dictionary and sends a PROPOSE for each
