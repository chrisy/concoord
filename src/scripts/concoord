#!/usr/bin/env python
'''
@author: Deniz Altinbuken, Emin Gun Sirer
@note: concoord script
@date: January 20, 2012
@copyright: See LICENSE
'''
import signal
from time import sleep,time
import os, sys, time, shutil
import ast, _ast
try:
    from concoord.enums import *
    from concoord.safetychecker import *
    from concoord.proxygenerator import *
    from concoord.serversideproxyast import *
except:
    print "Cannot import concoord module, please check your installation"

HELPSTR = "concoord, version 0.1.0-release:\n\
concoord [acceptor] - starts an acceptor node\n\
concoord [replica] - starts a replica node\n\
concoord [nameserver] - starts a nameserver node\n\
concoord [addnode] - adds nodes to a specified concoord instance\n\
concoord [initialize] - initializes a concoord instance with given number of nodes\n\
concoord [object $objectfilepath $classname] - concoordifies a python object"

def start_node(nodetype):
    nodename = node_names[nodetype].lower()
    node = getattr(__import__('concoord.'+nodename, globals(), locals(), -1), nodename.capitalize())()
    node.startservice()
    signal.signal(signal.SIGINT, node.terminate_handler)
    signal.signal(signal.SIGTERM, node.terminate_handler)
    signal.pause()

def add_node():
    from concoord.openreplica.openreplicaaddnode import parser, options, start_node
    try:
        start_node(options.nodetype, options.subdomain, options.objectfilepath,
                   options.classname, options.bootstrapname)
    except Exception as e:
        parser.print_help()

def initialize():
    from concoord.openreplica.openreplicainitializer import parser, options, start_nodes, check_object
    try:
        with open(options.objectfilepath, 'rU') as fd:
            clientcode = fd.read()
        # Check safety
        if not check_object(clientcode):
            print "Object is not safe for us to execute."
            os._exit(1)
        # Start Nodes
        print "Connecting to Planet Lab"
        configuration = (int(options.replicanum), int(options.acceptornum), int(options.nameservernum))
        start_nodes(options.subdomain, options.objectfilepath, options.classname, configuration)
        # Create Proxy
        print "Creating proxy..."
        clientproxycode = createclientproxy(clientcode, options.classname, None)
        clientproxycode = clientproxycode.replace('\n\n\n', '\n\n')
        print "Proxy Code:"
        print clientproxycode
    except Exception as e:
        parser.print_help()

def main():
    if len(sys.argv) < 2:
        print HELPSTR
        sys.exit()
        
    sys.argv[1] = sys.argv[1].upper()    
    if sys.argv[1] == node_names[NODE_ACCEPTOR]:
        start_node(NODE_ACCEPTOR)
    elif sys.argv[1] == node_names[NODE_REPLICA]:
        start_node(NODE_REPLICA)
    elif sys.argv[1] == node_names[NODE_NAMESERVER]:
        start_node(NODE_NAMESERVER)
    elif sys.argv[1] == 'ADDNODE':
        add_node()
    elif sys.argv[1] == 'INITIALIZE':
        initialize()
    elif sys.argv[1] == 'OBJECT':
        from concoord.concoordify import main as concoordify
        concoordify()
    else:
        print HELPSTR

if __name__=='__main__':
    main()
